@mixin breakPoints($dimension) {
  @if $dimension == "xs" {
    @media (max-width: 576px) {
      @content;
    }
  } @else if $dimension == "sm" {
    @media (max-width: 768px) {
      @content;
    }
  } @else if $dimension == "md" {
    @media (max-width: 992px) {
      @content;
    }
  } @else if $dimension == "lg" {
    @media (max-width: 1200px) {
      @content;
    }
  } @else if $dimension == "xl" {
    @media (max-width: 1400px) {
      @content;
    }
  } @else if $dimension == "xxl" {
    @media (min-width: 1401px) {
      @content;
    }
  } @else {
    @error "The size `#{$dimension}` is not correct.";
  }
}
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
@mixin keyF($name){
  @-webkit-keyframes #{$name}{
    @content ;
  }
  @keyframes #{$name} {
    @content ;
  }
}
@mixin bg-cover {
  background-repeat: no-repeat;
  background-position: center center;
  background-size: cover;
}
@mixin box-shadow($x, $y, $blur, $color, $spread: 0) {
  -webkit-box-shadow: $x $y $blur $spread $color;
          box-shadow: $x $y $blur $spread $color;
}
@mixin btn($color,$back){
  background-color: $back;
  border: 2px solid $back;
  color: $color;
  padding: 10px 20px;
  font-size: 20px;
  border-radius: 20px;
  cursor: pointer;
  &:hover{
    background-color: transparent;
    color: $back;
  }
}
@mixin centering {
  display: flex ;
  justify-content: center ;
  align-items: center ;
}
@mixin grid($numCol,$siCol,$numRow,$siRow){
  display: grid ;
  grid-template-columns: repeat($numCol,$siCol) ;
  grid-template-rows: repeat($numRow,$siRow) ;
}
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin linear-gradient($start, $end, $deg: 180deg) {
  background: linear-gradient($deg, $start, $end);
}
@mixin text-ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
@mixin transform($value) {
  -webkit-transform: $value;
     -ms-transform: $value;
         transform: $value;
}
@mixin transition($properties, $duration: .3s, $ease: ease) {
  transition: $properties $duration $ease;
}
